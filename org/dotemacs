;; -*- mode: emacs-lisp -*-

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-enabled-themes (quote (deeper-blue)))
 '(dired-hide-details-hide-information-lines nil)
 '(package-selected-packages
   (quote
    (spacemacs-theme ido-complete-space-or-hyphen yasnippet-snippets projectile-codesearch projectile-direnv idomenu ido-grid-mode ido-clever-match ido-yes-or-no ido-select-window ido-vertical-mode yascroll arview gitter projectile sqlformat comint-intercept sqlup-mode markdown-preview-mode markdown-mode+ markdown-mode org sql-indent paredit clojure-snippets clojure-quick-repls clojure-cheatsheet helm clojure-mode-extra-font-locking)))
 '(safe-local-variable-values
   (quote
    ((eval progn
	   (put
	    (quote defendpoint)
	    (quote clojure-doc-string-elt)
	    3)
	   (put
	    (quote defendpoint-async)
	    (quote clojure-doc-string-elt)
	    3)
	   (put
	    (quote api/defendpoint)
	    (quote clojure-doc-string-elt)
	    3)
	   (put
	    (quote api/defendpoint-async)
	    (quote clojure-doc-string-elt)
	    3)
	   (put
	    (quote defsetting)
	    (quote clojure-doc-string-elt)
	    2)
	   (put
	    (quote setting/defsetting)
	    (quote clojure-doc-string-elt)
	    2)
	   (put
	    (quote s/defn)
	    (quote clojure-doc-string-elt)
	    2)
	   (define-clojure-indent
	     (assert 1)
	     (assoc 1)
	     (ex-info 1)
	     (expect 0)
	     (match 1)
	     (merge-with 1)
	     (with-redefs-fn 1)))
     (eval put
	   (quote ui/defcomponentmethod)
	   (quote clojure-backtracking-indent)
	   (quote
	    (4
	     (2))))
     (eval put
	   (quote defcomponentmethod)
	   (quote clojure-backtracking-indent)
	   (quote
	    (4
	     (2))))
     (eval put
	   (quote ui/defcomponent)
	   (quote clojure-backtracking-indent)
	   (quote
	    (4
	     (2))))
     (eval put
	   (quote defcomponent)
	   (quote clojure-backtracking-indent)
	   (quote
	    (4
	     (2))))
     (eval put-clojure-indent
	   (quote let->>)
	   1)
     (eval put-clojure-indent
	   (quote record)
	   1)
     (eval put-clojure-indent
	   (quote match)
	   1))))
 '(show-paren-mode t))

;;(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
;; '(default ((t (:family "Verdana" :foundry "outline" :slant normal :weight normal :height 120 :width normal)))))

(defun xah-dired-mode-setup ()
  "to be run as hook for `dired-mode'."
  (dired-hide-details-mode 1))
(add-hook 'dired-mode-hook 'xah-dired-mode-setup)

(setq
   backup-by-copying t      ; don't clobber symlinks
   backup-directory-alist
    '(("." . "~/.saves"))    ; don't litter my fs tree
   delete-old-versions t
   kept-new-versions 6
   kept-old-versions 2
   version-control t)       ; use versioned backups


;(require 'clojure-mode)
(defun turn-on-paredit () (paredit-mode 1))
(add-hook 'clojure-mode-hook 'turn-on-paredit)
(add-to-list 'auto-mode-alist '("\\.clj$\\'" . clojure-mode))
(add-to-list 'auto-mode-alist '("\\.edn$\\'" . clojure-mode))


(package-initialize)

(setq cider-cljs-lein-repl
	"(do (require 'figwheel-sidecar.repl-api)
         (figwheel-sidecar.repl-api/start-figwheel!)
         (figwheel-sidecar.repl-api/cljs-repl))")

(require 'package)
(let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
		    (not (gnutls-available-p))))
       (proto (if no-ssl "http" "https")))
  ;; Comment/uncomment these two lines to enable/disable MELPA and MELPA Stable as desired
  (add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t)
  ;;(add-to-list 'package-archives (cons "melpa-stable" (concat proto "://stable.melpa.org/packages/")) t)
  (when (< emacs-major-version 24)
    ;; For important compatibility libraries like cl-lib
    ))
(package-initialize)

(defun my-resize-margins ()
  (let ((margin-size (/ (- (frame-width) 80) 2)))
    (set-window-margins nil margin-size margin-size)))

;;(add-hook 'window-configuration-change-hook #'my-resize-margins)
;;(my-resize-margins)
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:family "Courier New" :foundry "outline" :slant normal :weight normal :height 120 :width normal))))
 '(hl-line ((t (:inherit highlight :background "lightgreen" :foreground "black")))))



(defun my-setup-indent (n)
  ;; java/c/c++
  (setq-local c-basic-offset n)
  ;; web development
  (setq-local coffee-tab-width n) ; coffeescript
  (setq-local javascript-indent-level n) ; javascript-mode
  (setq-local js-indent-level n) ; js-mode
  (setq-local js2-basic-offset n) ; js2-mode, in latest js2-mode, it's alias of js-indent-level
  (setq-local web-mode-markup-indent-offset n) ; web-mode, html tag in html file
  (setq-local web-mode-css-indent-offset n) ; web-mode, css in html file
  (setq-local web-mode-code-indent-offset n) ; web-mode, js code in html file
  (setq-local css-indent-offset n) ; css-mode
  )

(defun my-setup-indent (n)
  ;; java/c/c++
  (setq-local c-basic-offset n)
  ;; web development
  (setq-local coffee-tab-width n) ; coffeescript
  (setq-local javascript-indent-level n) ; javascript-mode
  (setq-local js-indent-level n) ; js-mode
  (setq-local js2-basic-offset n) ; js2-mode, in latest js2-mode, it's
				  ; alias of js-indent-level
  (setq-local web-mode-markup-indent-offset n) ; web-mode, html tag in html file
  (setq-local web-mode-css-indent-offset n) ; web-mode, css in html file
  (setq-local web-mode-code-indent-offset n) ; web-mode, js code in html file
  (setq-local css-indent-offset n) ; css-mode
  )

(defun my-office-code-style ()
  (interactive)
  (message "Office code style!")
  ;; use tab instead of space
  (setq-local indent-tabs-mode t)
  ;; indent 4 spaces width
  (my-setup-indent 4))

(defun my-personal-code-style ()
  (interactive)
  (message "My personal code style!")
  ;; use space instead of tab
  (setq indent-tabs-mode nil)
  ;; indent 2 spaces width
  (my-setup-indent 2))

(defun my-setup-develop-environment ()
  (interactive)
  (let ((proj-dir (file-name-directory (buffer-file-name))))
    ;; if hobby project path contains string "hobby-proj1"
    (if (string-match-p "hobby-proj1" proj-dir)
        (my-personal-code-style))

    ;; if commericial project path contains string "commerical-proj"
    (if (string-match-p "commerical-proj" proj-dir)
        (my-office-code-style))))

;; prog-mode-hook requires emacs24+
;(add-hook 'prog-mode-hook 'my-setup-develop-environment)
;; a few major-modes does NOT inherited from prog-mode
;(add-hook 'lua-mode-hook 'my-setup-develop-environment)
;(add-hook 'web-mode-hook 'my-setup-develop-environment)


(add-hook 'python-mode-hook
      (lambda ()
        (setq indent-tabs-mode t)
        (setq tab-width 2)
        (setq python-indent-offset 2)))

;(setq spacemacs-start-directory "~/.emacs.d/")
;(load-file (concat spacemacs-start-directory "init.el"))
